# Generated by Django 3.2.6 on 2023-02-02 10:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('genre', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Genres',
                'db_table': 'app_genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StreamingServices',
            fields=[
                ('provider_id', models.IntegerField(primary_key=True, serialize=False)),
                ('display_priority', models.IntegerField(blank=True, null=True)),
                ('logo_path', models.CharField(blank=True, max_length=200, null=True)),
                ('provider_name', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Streaming Services',
                'db_table': 'app_streamingservices',
                'ordering': ['provider_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Streamingurls',
            fields=[
                ('provider_id', models.IntegerField(primary_key=True, serialize=False)),
                ('url_path', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Streaming URLs',
                'db_table': 'app_streamingurls',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('bio', models.CharField(blank=True, max_length=250, null=True)),
                ('prof_pic', models.ImageField(default='default.png', null=True, upload_to='profile_images')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('profile_status', models.IntegerField(choices=[(0, 'Public'), (1, 'Private')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'app_fahrenheit_profile',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Fahrenheit_App_List',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app_name', models.CharField(blank=True, max_length=125, null=True)),
                ('app_base_link', models.CharField(blank=True, help_text='Ex: /app_name/', max_length=100, null=True)),
                ('app_icon', models.ImageField(default='defaultplaylist.png', null=True, upload_to='app_icons')),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('app_status', models.IntegerField(choices=[(0, 'Public'), (1, 'Private')], default=0)),
                ('internal_app_status', models.IntegerField(choices=[(0, 'Open'), (1, 'Restricted')], default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='app_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Fahrenheit Apps',
                'db_table': 'app_fahrenheit_app_list',
            },
        ),
        migrations.CreateModel(
            name='User_Following',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('following_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Fahrenheit Followers',
            },
        ),
        migrations.CreateModel(
            name='User_App_Following',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mute_notifications', models.BooleanField(blank=True, default=False, null=True)),
                ('date_added', models.DateTimeField(auto_now=True)),
                ('following_app_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='apps', to='app.fahrenheit_app_list')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_app', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Fahrenheit App Followers',
                'ordering': ['date_added'],
            },
        ),
        migrations.CreateModel(
            name='Follow_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_requested', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_user', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Fahrenheit Follower Requests',
            },
        ),
        migrations.CreateModel(
            name='EcstaStreamProfile',
            fields=[
                ('ec_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(0, 'Open'), (1, 'Restricted')], default=0)),
                ('profile_status', models.IntegerField(choices=[(0, 'Public'), (1, 'Private')], default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('streaming_services', models.ManyToManyField(related_name='user_streaming_services', to='app.StreamingServices')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ecstastream_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Profiles',
            },
        ),
        migrations.CreateModel(
            name='EcstaStreamPlaylist',
            fields=[
                ('ec_playlist_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=50, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('private', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, max_length=150, null=True)),
                ('cover_img', models.ImageField(default='defaultplaylist.png', null=True, upload_to='cover_images')),
                ('comments_on', models.BooleanField(default=False)),
                ('status', models.BooleanField(choices=[(0, 'Open'), (1, 'Restricted')], default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='app.ecstastreamprofile')),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Playlists',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='EcstaStream_User_Streaming_List',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('streaming_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streaming', to='app.streamingservices')),
                ('user_streaming', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_streaming', to='app.ecstastreamprofile')),
            ],
        ),
        migrations.CreateModel(
            name='EcstaStream_Playlists_Following',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('playlist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlist', to='app.ecstastreamplaylist')),
                ('user_following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_pl', to='app.ecstastreamprofile')),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Playlist Followers',
                'ordering': ['date_added'],
            },
        ),
        migrations.CreateModel(
            name='Ecstastream_Playlist_Data',
            fields=[
                ('pl_data_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('pl_mov_show_id', models.IntegerField()),
                ('pl_date_added', models.DateTimeField(auto_now=True)),
                ('media_type', models.IntegerField(blank=True, choices=[('Movie', 0), ('TV', 1)], null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pl_user', to=settings.AUTH_USER_MODEL)),
                ('user_playlist_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pl_id', to='app.ecstastreamplaylist')),
            ],
            options={
                'verbose_name_plural': 'Ecstastream Playlist Data',
                'ordering': ['-pl_date_added'],
            },
        ),
        migrations.AddConstraint(
            model_name='user_app_following',
            constraint=models.UniqueConstraint(fields=('following_app_id', 'user'), name='user_app_following'),
        ),
        migrations.AlterUniqueTogether(
            name='user_app_following',
            unique_together={('following_app_id', 'user')},
        ),
        migrations.AddConstraint(
            model_name='fahrenheit_app_list',
            constraint=models.UniqueConstraint(fields=('app_name', 'app_base_link'), name='app_id_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='fahrenheit_app_list',
            unique_together={('app_name', 'app_base_link')},
        ),
        migrations.AddConstraint(
            model_name='ecstastreamprofile',
            constraint=models.UniqueConstraint(fields=('user_id',), name='EcstaStreamUserConstraint'),
        ),
        migrations.AlterUniqueTogether(
            name='ecstastreamprofile',
            unique_together={('user_id',)},
        ),
        migrations.AlterUniqueTogether(
            name='ecstastreamplaylist',
            unique_together={('created_by', 'title')},
        ),
        migrations.AddConstraint(
            model_name='ecstastream_user_streaming_list',
            constraint=models.UniqueConstraint(fields=('user_streaming', 'streaming_id'), name='user_streaming'),
        ),
        migrations.AlterUniqueTogether(
            name='ecstastream_user_streaming_list',
            unique_together={('user_streaming', 'streaming_id')},
        ),
        migrations.AddConstraint(
            model_name='ecstastream_playlists_following',
            constraint=models.UniqueConstraint(fields=('user_following', 'playlist_id'), name='user_playlist_following'),
        ),
        migrations.AlterUniqueTogether(
            name='ecstastream_playlists_following',
            unique_together={('user_following', 'playlist_id')},
        ),
        migrations.AddConstraint(
            model_name='ecstastream_playlist_data',
            constraint=models.UniqueConstraint(fields=('user', 'user_playlist_id', 'pl_mov_show_id', 'media_type'), name='user_data_playlist_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='ecstastream_playlist_data',
            unique_together={('user', 'user_playlist_id', 'pl_mov_show_id', 'media_type')},
        ),
    ]
